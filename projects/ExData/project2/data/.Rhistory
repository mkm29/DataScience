cor(x[1],y[1])
d
hClustering <- hclust(d)
plot(hClustering)
hClustering
?hclust
str(hClustering)
source('~/Desktop/DataScience/clustering.R')
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
df <- data.frame(x = x, y = y)
d <- dist(df)
hClustering <- hclust(d)
plot(hClustering)
plot(df)
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
df <- data.frame(x = x, y = y)
plot(df)
plot(df)
d <- dist(df)
hClustering <- hclust(d)
myplclust(hClustering)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each=4))
set.seed(143)
dataMatrix <- as.matrix(df)[sample(1:12),]
dataMatrix
plot(dataMatrix)
heatmap(dataMatrix)
dataMatrix
plot(df)
clus1 <- kmeans(df, centers = 3)
str(clust1)
clust1 <- kmeans(df, centers = 3)
str(clust1)
clust1$centers
clust2 <- kmeans(df, centers = 4)
str(clust2)
clust1$withinss
clust2$withinss
clust2$tot.withinss #
str(kmeansdf, centers = 2))
str(kmeans(df, centers = 2))
par(mar = rep(0.2,4))
plot(x, y, col = clust1$centers, pch = 19, cex = 2)
par(mar = rep(0.2,4))
plot(df$x, df$y, col = clust1$centers, pch = 19, cex = 2)
points(clust1$centers, col = 1:3, pch = 3, cex = 1, lwd = 3)
par(mar = rep(0.2,4))
plot(df$x, df$y, col = clust1$cluster, pch = 19, cex = 2)
points(clust1$centers, col = 1:3, pch = 3, cex = 1, lwd = 3)
clust3 <- kmeans(dataMatrix, centers = 3)
str(clust3)
clust3 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[,order(clust3$cluster)], yaxt = "n")
(t(dataMatrix)[,nrow(dataMatrix):1]
)
dataMatrix
t(dataMatrix)[,order(clust3$cluster)]
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
par(mar = rep(0.2,4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2,4))
heatmap(dataMatrix)
# see if there are any "significant" clusters present in the data
# manual inspection: 4x3 = 12 clusters
clust1 <- kmeans(dataMatrix, centers = 12)
str(clust1)
unique(clust1$cluster)
dataMatrix
sed.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom(1,1,0.5)
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,3), each = 5)
}
}
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
dataMatrix
set.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom(1,1,0.5)
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,3), each = 5)
}
}
dataMatrix
heatmap(dataMatrix)
clust1 <- kmeans(dataMatrix, centers = 6)
str(clust1)
plot(clust1)
str(kmeans(dataMatrix, centers = 2))
str(kmeans(dataMatrix, centers = 3))
str(kmeans(dataMatrix, centers = 4))
str(kmeans(dataMatrix, centers = 5))
str(kmeans(dataMatrix, centers = 20))
str(kmeans(dataMatrix, centers = 30))
str(kmeans(dataMatrix, centers = 40))
str(kmeans(dataMatrix, centers = 39))
k <- 8
str(kmeans(dataMatrix, centers = k))
hh <- hclust(dist(dataMatrix))
par(mfrow = c(1,3))
dataMatrixOrdered <- dataMatrix[hh$order, ]
image(t(dataMatrix)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Means", pch = 19)
?svd
svd(dataMatrix)
svd(dataMatrix)
?scale
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First Left Signular Vector", pch = 19)
plot(svd1$v[,1], xlab = "Column", ylab = "First right signular vector", pch = 19)
svd1$u
plot(svd1$u[,2], 40:1)
plot(svd1$u[,3], 40:1)
plot(svd1$u[,4], 40:1)
plot(svd1$u[,5], 40:1)
str(svd1)
par(mfrow = c(1,2))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,2), mar = rep(1,4))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
# the d vector describes how much of the variation is explained
par(mfrow = c(1,2), mar = c(4,1,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
par(mar = rep(0.2,4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2,4))
heatmap(dataMatrix)
# see if there are any "significant" clusters present in the data
# manual inspection: 4x3 = 12 clusters
clust1 <- kmeans(dataMatrix, centers = 12)
str(clust1) # no real interesting pattern, lets add some
set.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom(1,1,0.5)
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,3), each = 5)
}
}
heatmap(dataMatrix)
clust1 <- kmeans(dataMatrix, centers = 6)
str(clust1)
# I would guess you set the number of clusters to k where k is a factor of 2
k <- 8
str(kmeans(dataMatrix, centers = k))
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Means", pch = 19)
## SVD
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First Left Signular Vector", pch = 19)
plot(svd1$v[,1], xlab = "Column", ylab = "First right signular vector", pch = 19)
# the d vector describes how much of the variation is explained
par(mfrow = c(1,2), mar = c(4,1,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
35/5233000
1/(35/5233000)
21/323100000
1/(21/323100000)
(35/5233000)*303625
(35/5233000)*8538000
(35/5233000)*377165
1/(21/323100000)
1/(35/5233000)
dim(svd1$u)
dim(svd1$v)
dataMatrix
svd1$d
svd1$u
hist(svd1$u[,1])
hist(svd1$u[,2])
svd1$v
hist(svd1$v[,1])
hist(svd1$v[1,])
plot(dataMatrix)
hist(dataMatrix)
par(mfrow = c(1,2), mar = c(4,1,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,2), mar = c(4,2,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,2), mar = c(4,2,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
## test variance
dataMatrix2 <- matrix(rnorm(400), nrow = 40)
dataMatrix2 <- matrix(rnorm(400), nrow = 40)
svd2 <- svd(scale(dataMatrix2))
par(mfrow = c(1,2), mar = c(4,2,1,1))
plot(svd2$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd2$d^2/sum(svd2$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,2))
plot(svd2$u[,1], 40:1, xlab = "Row", ylab = "First Left Signular Vector", pch = 19)
plot(svd2$v[,1], xlab = "Column", ylab = "First right signular vector", pch = 19)
abline(c(1,0))
abline(c(0.4,0))
abline(c(0.4,1))
dataMatrix
rep(c(0,5), each = 5)
set.seed(678910)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
if (coinFlip2) {
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
}
dataMatrix
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
coinFlip1
coinFlip2
set.seed(678910)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
if (coinFlip2) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
}
dataMatrix
rep(c(0,5), each = 5)
set.seed(678910)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), each = 5)
}
if (coinFlip2) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), each = 5)
}
}
rep(c(0,1),5)
dataMatrix <- matrix(rnorm(400), nrow = 40)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), each = 5)
}
if (coinFlip2) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), 5)
}
}
dataMatrix
set.seed(678910)
dataMatrix <- matrix(rnorm(400), nrow = 40)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), each = 5)
}
if (coinFlip2) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), 5)
}
}
dataMatrix
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(svd2$v[,1], pch = 19, ylab = "First right singular vector")
plot(svd2$v[,2], pch = 19, ylab = "Second right singular vector")
par(mfrow = c(1,2))
plot(svd2$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd2$d^2/sum(svd2$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
svd2$d
svd2$d^2/sum(svd2$d^2)
svd1$d^2/sum(svd1$d^2)
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
library(impute)
dataMatrix <- matrix(rnorm(400), nrow = 40)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100,size = 40, replace = F)]
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100,size = 40, replace = F)] <- NA
dataMatrix2
dataMatrix2 <- impute.knn(dataMatrix2)$data
dataMatrix2
svd1 <- svd(scale(dataMatrixOrdered))
svd2 <- svd(scale(dataMatrix2))
svd1 <- svd(scale(dataMatrixOrdered))
svd2 <- svd(scale(dataMatrix2))
par(mfrow = c(1,2)); plot(svd1$v[,1], pch = 19); plot(svd2$v[,1], pch = 19)
dim(svd2$d)
svd2$d
length(svd2$d)
dim(svd2$u)
dim(svd2$v)
heat.colors()
heat.colors(1)
heat.colors(100)
topo.colors(100)
library(grDevices)
colors()
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(0.5)
35/5330000
1/6.566604e-06
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(5, "BuGN")
cols <- brewer.pal(5, "BuGn")
cols
pal <- colorRampPalette(cols)
pal(1)
?rgb
rgb(0,1,0)
rgb(0,1,0, alpha = 0.5)
rgb(0,1,0, alpha = 1)
x <- rnorm(1000)
y <- rnorm(1000)
plot(x,y)
par(mfrow = c(1,1))
plot(x,y)
plot(x,y, col = rgb(0,0,0,0.2))
plot(x,y, col = rgb(0,0,0,0.2), pch = 19)
smoothScatter(x,y)
source('~/Desktop/DataScience/smartphone_analysis.R')
source('~/Desktop/DataScience/smartphone_analysis.R')
projectDirectory
dataDirectory
paste0(dataDirectory, "/UCI HAR Dataset.zip")
source('~/Desktop/DataScience/smartphone_analysis.R')
source('~/Desktop/DataScience/smartphone_analysis.R')
source('~/Desktop/DataScience/smartphone_analysis.R')
projectDataDirectory
setwd(projectDataDirectory)
dir()
source('~/Desktop/DataScience/smartphone_analysis.R')
head(x.train)
View(y.train)
source('~/Desktop/DataScience/smartphone_analysis.R')
head(train.subject)
head(train.y)
names(train.x)
source('~/Desktop/DataScience/smartphone_analysis.R')
source('~/Desktop/DataScience/smartphone_analysis.R')
View(features)
source('~/Desktop/DataScience/smartphone_analysis.R')
names(train.x)
names(train.x) <- as.character(features[,2])
colnames(train.x)
colnames(train.x) <- features$V2
source('~/Desktop/DataScience/smartphone_analysis.R')
head(train.x)
View(train.x)
?rm
View(activity.labels)
activity.labels[,2]
al <- activity.labels[,2]
al
source('~/Desktop/DataScience/smartphone_analysis.R')
View(activity.labels)
source('~/Desktop/DataScience/smartphone_analysis.R')
View(activity.labels)
View(train.subject)
names(train.x)
names(train.x)[1:12]
table(train.y)
View(train.y)
37/5330000
1/6.941839e-06
6.941839e-06*377165
library(swirl)
swirl()
swirl()
install.packages("fields")
library(fields)
install.packages("fields")
library(fields)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
12
abline(h = 0.05, col = "green")
View(dFsm)
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch = 19, cex=2, col = cols1[newClust]
)
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19,cex=2,col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch=9, cex=2,lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,kmObj$cluster,pch=19,cex=2)
plot(x,y,col = kmObj$cluster,pch=19,cex=2)
points(kmObj$centers[,1], kmObj$centers[,2], col = c("black", "red", "green"), pch = 3, cex=3, lwd=3)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex=3, lwd=3)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
summary(kmObj)
kmObj
kmObj2 <- kmeans(dataFrame, centers = 4)
kmObj2
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPath.R")
myedit("addPatt.R")
source("addPatt.R", local = T)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
120000/0.07
120000/0.03
120000/0.01
120000/0.02
120000/0.017
library(dplyr)
library(ggplot2)
library(stringr)
setwd("~/Desktop/DataScience/coursera/projects/ExData/project2/data")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- readRDS("summarySCC_PM25.rds")
#NEI$fips <- with(NEI, as.factor(fips))
# lets split fips into its state and county code
NEI$StateNum <- with(NEI, substring(fips, 1, 2))
NEI$CountyNum <- with(NEI, substring(fips, 3, 5))
states <- read.csv("stateLookup.csv")$StateName
states <- gsub("(?<=^|; )([a-z])", "\\U\\1", tolower(states), perl = T)
# split up fips into a state and county code
# SSCCC (2 digits for the state, followed by 3 for the county)
fips <- readLines("fips.csv")
x <- str_match(fips, "^.*(\\d{5})\\s+(.*)$")
fips.lookup <- matrix(x[,3], nrow = length(x[,3]))
rm(x);
length(NEI$fips)
state.area
length(state.area)
state.abb
states
state.center
state.division
state.name
state.region
state.x77
fips <- readLines("fips.csv")
x <- str_match(fips, "^.*(\\d{5})\\s+(.*)$")
length(x[,2])
head(NEI)

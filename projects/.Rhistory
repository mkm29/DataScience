plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Means", pch = 19)
?svd
svd(dataMatrix)
svd(dataMatrix)
?scale
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First Left Signular Vector", pch = 19)
plot(svd1$v[,1], xlab = "Column", ylab = "First right signular vector", pch = 19)
svd1$u
plot(svd1$u[,2], 40:1)
plot(svd1$u[,3], 40:1)
plot(svd1$u[,4], 40:1)
plot(svd1$u[,5], 40:1)
str(svd1)
par(mfrow = c(1,2))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,2), mar = rep(1,4))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
# the d vector describes how much of the variation is explained
par(mfrow = c(1,2), mar = c(4,1,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
par(mar = rep(0.2,4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2,4))
heatmap(dataMatrix)
# see if there are any "significant" clusters present in the data
# manual inspection: 4x3 = 12 clusters
clust1 <- kmeans(dataMatrix, centers = 12)
str(clust1) # no real interesting pattern, lets add some
set.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom(1,1,0.5)
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,3), each = 5)
}
}
heatmap(dataMatrix)
clust1 <- kmeans(dataMatrix, centers = 6)
str(clust1)
# I would guess you set the number of clusters to k where k is a factor of 2
k <- 8
str(kmeans(dataMatrix, centers = k))
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Means", pch = 19)
## SVD
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First Left Signular Vector", pch = 19)
plot(svd1$v[,1], xlab = "Column", ylab = "First right signular vector", pch = 19)
# the d vector describes how much of the variation is explained
par(mfrow = c(1,2), mar = c(4,1,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
35/5233000
1/(35/5233000)
21/323100000
1/(21/323100000)
(35/5233000)*303625
(35/5233000)*8538000
(35/5233000)*377165
1/(21/323100000)
1/(35/5233000)
dim(svd1$u)
dim(svd1$v)
dataMatrix
svd1$d
svd1$u
hist(svd1$u[,1])
hist(svd1$u[,2])
svd1$v
hist(svd1$v[,1])
hist(svd1$v[1,])
plot(dataMatrix)
hist(dataMatrix)
par(mfrow = c(1,2), mar = c(4,1,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,2), mar = c(4,2,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,2), mar = c(4,2,1,1))
plot(svd1$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
## test variance
dataMatrix2 <- matrix(rnorm(400), nrow = 40)
dataMatrix2 <- matrix(rnorm(400), nrow = 40)
svd2 <- svd(scale(dataMatrix2))
par(mfrow = c(1,2), mar = c(4,2,1,1))
plot(svd2$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd2$d^2/sum(svd2$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,2))
plot(svd2$u[,1], 40:1, xlab = "Row", ylab = "First Left Signular Vector", pch = 19)
plot(svd2$v[,1], xlab = "Column", ylab = "First right signular vector", pch = 19)
abline(c(1,0))
abline(c(0.4,0))
abline(c(0.4,1))
dataMatrix
rep(c(0,5), each = 5)
set.seed(678910)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
if (coinFlip2) {
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
}
dataMatrix
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
coinFlip1
coinFlip2
set.seed(678910)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
if (coinFlip2) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
}
dataMatrix
rep(c(0,5), each = 5)
set.seed(678910)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), each = 5)
}
if (coinFlip2) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), each = 5)
}
}
rep(c(0,1),5)
dataMatrix <- matrix(rnorm(400), nrow = 40)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), each = 5)
}
if (coinFlip2) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), 5)
}
}
dataMatrix
set.seed(678910)
dataMatrix <- matrix(rnorm(400), nrow = 40)
for (i in 1:40) {
coinFlip1 <- rbinom(1,1,0.5)
coinFlip2 <- rbinom(1,1,0.5)
if (coinFlip1) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), each = 5)
}
if (coinFlip2) {
print(paste("set row", i, sep = " "))
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,1), 5)
}
}
dataMatrix
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(svd2$v[,1], pch = 19, ylab = "First right singular vector")
plot(svd2$v[,2], pch = 19, ylab = "Second right singular vector")
par(mfrow = c(1,2))
plot(svd2$d, xlab = "Column", ylab = "Signular value", pch = 19)
plot(svd2$d^2/sum(svd2$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
svd2$d
svd2$d^2/sum(svd2$d^2)
svd1$d^2/sum(svd1$d^2)
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
library(impute)
dataMatrix <- matrix(rnorm(400), nrow = 40)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100,size = 40, replace = F)]
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100,size = 40, replace = F)] <- NA
dataMatrix2
dataMatrix2 <- impute.knn(dataMatrix2)$data
dataMatrix2
svd1 <- svd(scale(dataMatrixOrdered))
svd2 <- svd(scale(dataMatrix2))
svd1 <- svd(scale(dataMatrixOrdered))
svd2 <- svd(scale(dataMatrix2))
par(mfrow = c(1,2)); plot(svd1$v[,1], pch = 19); plot(svd2$v[,1], pch = 19)
dim(svd2$d)
svd2$d
length(svd2$d)
dim(svd2$u)
dim(svd2$v)
heat.colors()
heat.colors(1)
heat.colors(100)
topo.colors(100)
library(grDevices)
colors()
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(0.5)
35/5330000
1/6.566604e-06
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(5, "BuGN")
cols <- brewer.pal(5, "BuGn")
cols
pal <- colorRampPalette(cols)
pal(1)
?rgb
rgb(0,1,0)
rgb(0,1,0, alpha = 0.5)
rgb(0,1,0, alpha = 1)
x <- rnorm(1000)
y <- rnorm(1000)
plot(x,y)
par(mfrow = c(1,1))
plot(x,y)
plot(x,y, col = rgb(0,0,0,0.2))
plot(x,y, col = rgb(0,0,0,0.2), pch = 19)
smoothScatter(x,y)
source('~/Desktop/DataScience/smartphone_analysis.R')
source('~/Desktop/DataScience/smartphone_analysis.R')
projectDirectory
dataDirectory
paste0(dataDirectory, "/UCI HAR Dataset.zip")
source('~/Desktop/DataScience/smartphone_analysis.R')
source('~/Desktop/DataScience/smartphone_analysis.R')
source('~/Desktop/DataScience/smartphone_analysis.R')
projectDataDirectory
setwd(projectDataDirectory)
dir()
source('~/Desktop/DataScience/smartphone_analysis.R')
head(x.train)
View(y.train)
source('~/Desktop/DataScience/smartphone_analysis.R')
head(train.subject)
head(train.y)
names(train.x)
source('~/Desktop/DataScience/smartphone_analysis.R')
source('~/Desktop/DataScience/smartphone_analysis.R')
View(features)
source('~/Desktop/DataScience/smartphone_analysis.R')
names(train.x)
names(train.x) <- as.character(features[,2])
colnames(train.x)
colnames(train.x) <- features$V2
source('~/Desktop/DataScience/smartphone_analysis.R')
head(train.x)
View(train.x)
?rm
View(activity.labels)
activity.labels[,2]
al <- activity.labels[,2]
al
source('~/Desktop/DataScience/smartphone_analysis.R')
View(activity.labels)
source('~/Desktop/DataScience/smartphone_analysis.R')
View(activity.labels)
View(train.subject)
names(train.x)
names(train.x)[1:12]
table(train.y)
View(train.y)
source('~/Desktop/DataScience/smartphone_analysis.R')
names(train.x)
head(train.x)
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
View(total)
class(total$Activity)
samsungData <- total
rm(total)
sub1 <- subset(samsungData, SubjectNum == 1)
View(sub1)
par(mfrow = c(1,2), mar = c(5,4,1,1))
plot(sub1[,1], col = sub1$Activity, ylab = names(sub1)[1])
head(sub1)
par(mfrow = c(1,2), mar = c(5,4,1,1))
plot(sub1[,3], col = sub1$Activity, ylab = names(sub1)[3])
source('~/Desktop/DataScience/smartphone_analysis.R')
samsungData <- rbind(train.x, test.x)
head(samsungData)
names(samsungData)
"subject" %in% names(samsungData)
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
unique(total$SubjectNum)
sub1 <- subset(total, SubjectNum == 1)
par(mfrow = c(1,2), mar = c(5,4,1,1))
plot(sub1$`tBodyAcc-mean-X`, col = sub1$Activity)
par(mfrow = c(1,2), mar = c(5,4,1,1))
plot(sub1$`tBodyAcc-mean-X`, col = sub1$Activity, ylab = names(sub1)[3])
plot(sub1$`tBodyAcc-mean-Y`, col = sub1$Activity, ylab = names(sub1)[4])
View(activityLabels)
legend("bottomleft", legend = activityLabels$activityName, col = activityLabels$activityName, pch = 1)
par(mfrow = c(1,2), mar = c(5,4,1,1))
plot(sub1$`tBodyAcc-mean-X`, col = sub1$Activity, ylab = names(sub1)[3])
plot(sub1$`tBodyAcc-mean-Y`, col = sub1$Activity, ylab = names(sub1)[4])
legend("bottomleft", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1)
plot(sub1$`tBodyAcc-mean-X`, col = sub1$Activity, ylab = names(sub1)[3])
plot(sub1$`tBodyAcc-mean-Y`, col = sub1$Activity, ylab = names(sub1)[4])
legend("bottomright", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1)
par(mfrow = c(1,2))
plot(sub1[,12], pch = 19, col = sub1$Activity, ylab = names(sub1)[12])
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
par(mfrow = c(1,2))
plot(sub1$`tBodyAcc-max-X`, pch = 19, col = sub1$Activity, ylab = "tBodyAcc-max-X")
plot(sub1$`tBodyAcc-max-Y`, pch = 19. col = sub1$Activity, ylab = "tBodyAcc-max-Y")
par(mfrow = c(1,2))
plot(sub1$`tBodyAcc-max-X`, pch = 19, col = sub1$Activity, ylab = "tBodyAcc-max-X")
plot(sub1$`tBodyAcc-max-Y`, pch = 19, col = sub1$Activity, ylab = "tBodyAcc-max-Y")
legend("bottomright", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1)
?legend
par(mfrow = c(1,2))
plot(sub1$`tBodyAcc-max-X`, pch = 19, col = sub1$Activity, ylab = "tBodyAcc-max-X")
legend("topleft", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1)
plot(sub1$`tBodyAcc-max-Y`, pch = 19, col = sub1$Activity, ylab = "tBodyAcc-max-Y")
dir()
getwd()
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
getwd()
getwd("../")
setwd("../")
getwd()
dir()
setwd("data/UCI HAR Dataset/")
dir()
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
dataDirectory
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
dataDirectory
projectDirectory
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
dataDirectory
projectDirectory
setwd("../data/UCI HAR Dataset/")
getwd()
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
paste0(dataDirectory, "activity_labels.txt")
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
# Read in the raw, unformatted data
# "Clean it up" by only extracting the necessary columns (features)
#  Repeat this process for both the train and test data sets
#
# Args: none
#
# Returns: officially nothing is returned from this function,
#   however the formatted train and test data sets are added to the global environment
# Read data
activityLabels <<- fread(paste(dataDirectory, "activity_labels.txt"), col.names = c("classLabels", "activityName"))
# Read in the raw, unformatted data
# "Clean it up" by only extracting the necessary columns (features)
#  Repeat this process for both the train and test data sets
#
# Args: none
#
# Returns: officially nothing is returned from this function,
#   however the formatted train and test data sets are added to the global environment
# Read data
activityLabels <<- fread(paste0(dataDirectory, "activity_labels.txt"), col.names = c("classLabels", "activityName"))
View(activityLabels)
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
dir()
source("myplclust.R")
samsungData$Activity <- factor(samsungData$Activity, levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
sub1 <- subset(samsungData, SubjectNum == 1)
par(mfrow = c(1,2), mar = c(5,4,1,1))
plot(sub1$`tBodyAcc-mean-X`, col = sub1$Activity, ylab = names(sub1)[3])
plot(sub1$`tBodyAcc-mean-Y`, col = sub1$Activity, ylab = names(sub1)[4])
legend("bottomright", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1)
par(mfrow = c(1,2))
plot(sub1$`tBodyAcc-max-X`, pch = 19, col = sub1$Activity, ylab = "tBodyAcc-max-X")
legend("topleft", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1)
plot(sub1$`tBodyAcc-max-Y`, pch = 19, col = sub1$Activity, ylab = "tBodyAcc-max-Y")
names(samsungData)
names(samsungData[,9:11])
names(sub1)
names(sub1[,9:11])
distanceMatrix <- dist(sub1[,9:11])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$Activity))
source("myplclust.R")
distanceMatrix <- dist(sub1[,9:11])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$Activity))
unclass(sub1$Activity)
al <- unclass(sub1$Activity)
class(al)
sub1$Activity
unique(sub1$Activity)
myplclust(hclustering, lab.col = activityLabels$classLabels)
myplclust(hclustering, lab.col = 1:6)
myplclust(hclustering)#, lab.col = 1:6)
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
View(features)
featuresToInclude <- features[, featureNames]
measurements <- features[featuresToInclude,featureNames]
View(features)
featuresToInclude <- features[, 1]
measurements <- features[featuresToInclude,featureNames]
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
features[, featureNames]
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
features[, featureNames]
index(features)
row.names(features)
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
featuresToInclude
class(featuresToInclude)
class(row.names(features))
class(as.numeric(row.names(features)))
source('~/Desktop/DataScience/coursera/projects/run_analysis.R')
svd1 <- svd(scale(sub1[, -c(562,563)]))
svd1 <- svd(scale(sub1[, -c(1,2,562,563)]))
par(mfrow = c(1,2))
plot(svd1$u[,1], col = sub1$Activity, pch = 19)
plot(svd1$u[,2], col = sub1$Activity, pch = 19)
legend("bottomright", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1)
par(mfrow = c(1,3))
plot(svd1$u[,1], col = sub1$Activity, pch = 19)
plot(svd1$u[,2], col = sub1$Activity, pch = 19)
plot(legend("bottomright", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1))
par(mfrow = c(1,3))
plot(svd1$u[,1], col = sub1$Activity, pch = 19)
plot(svd1$u[,2], col = sub1$Activity, pch = 19)
plot.new()
legend("bottomright", legend = activityLabels$activityName, col = activityLabels$classLabels, pch = 1)
par(mfrow = c(1,1))
plot(svd1$v[,2], pch = 19)
plot(svd1$d^2/sum(svd1$d^2))
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
par(mfrow = c(1,1))
plot(svd1$v[,2], pch = 19)
maxContrib <- which.max(svd1$v[,2])
distanceMatrix <- dist(sub1[, c(9:11, maxContrib)])
distanceMatrix
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = 1:6)
names(samsungData)[maxContrib]
# use k-means clustering to see if we can seperate out the individual activities
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6)
table(kClust$cluster, sub1$Activity)
kClust <- kmeans(sub1[,-c(1,2,562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$Activity)

442*2
477*3
421*3
442*3
factanal(0)
?rnorm
x <- rnorm(10)
x
norm(x)
?norm
norm(x, typ)
norm(x, type = "F")
typeof(x)
norm(as.numeric(x))
convRate <- 10699
0.0033 * convRate
0.0270 * convRate
0.0101 * convRate
0.0115 * convRate
0.0146 * convRate
0.0146 * convRate
0.0040 * convRate
0.0230 * convRate
0.0154 * convRate
0.0117 * convRate
0.0434 * convRate
rate <- 11375.01
0.0037*rate
0.2679*rate
0.0585*rate
665/113
0.0037*rate
0.3694*rate
0.0567277*rate
0.0074 *rate
0.0507*rate
0.0873*rate
0.0011*rate
0.0400*rate
0.0873 *rate
0.0085*rate
0.0005 * rate
0.0058*rate
0.0008*rate
(0.0005+0.002)*rate
0.0014*rate
0.0052*rate
(0.0033+0.003)*rate
0.0529*rate
(0.0579+0.031)*rate
(0.0125+0.01)*rate
(0.0206+0.01)*rate
0.018*rate
(0.0097+0.022)*rate
0.0105*rate
(0.0202+0.031)*rate
(0.0712+0.007)*rate
(0.0198+0.009)*rate
(0.0148+0.007)*rate
(0.0200+0.008)*rate
0.0052*rate
0.027*rate
0.03*rate
0.04*rate
0.05*rate
.13*rate
0.09*rate
rate = 11360
(0.0037+0.007)*rate
0.006*rate
0.0106*rate
(0.0122+0.008)*rate
(0.0072+0.008)*rate
172.67/7
(0.0044+0.008)*rate
(0.0122+0.008)*rate
229.472/14
0.0052*rate
0.0053*rate
(0.0392+0.012)*rate
(0.0133+0.007)*rate
230.608/14
0.007*2*rate
159/7
(0.0147+0.02)*rate
(0.0275+0.02)*rate
(0.0176+0.02)*rate
0.0130*rate
(0.0088+0.012)*rate
(0.0146+0.011)*rate
(0.0037+0.009)*rate
(0.0029+0.007)*rate
(0.0260+0.009)*rate
(0.0129+0.013)*rate
?lm
100/14.38
rates <- matrix(c(46.29,48.19,53.7,59.25), byrow = T)
rates
rates <- matrix(c(46.29,48.19,53.7,59.25), byrow = T, nrow = 2)
rates
rates/14.38
rate <- 9854.88
0.0097*rate
0.0133*rate
0.0133*rate/10
0.0134*rate
pi
options(digits = 10)
pi
z <- NULL
rm(z)
?head
install.packages("slidify")
library(devtools)
?install_github
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('ramnathv/slidifyLibraries', 'ramnathv')
library(slidify)
?slidify
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite()
install.packages("KernSmooth")
load(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
rate <- 9985.01
0.006 * rate
0.007 * rate
0.002 * rate
.01 * rate
library(swirl)
swirl()
play()
my_name
nxt()
c(my_char, "your_name_here")
info()
skip()
skip()
skip()
ino()
info()
main()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100).
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
?swirl
swirl()
info()
bye()
swirl(resume.class = "default")
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Mitchell Murphy")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3,c("X","Y","Z")), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y >0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect) <- c("foo", "bar", "norf")
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, byrow = F)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_vector, patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- colnames(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
bye()
x <- sample(c(0,1),1000)
?sample
x <- sample(c(0,1),1,100)
x
x <- sample(c(0,1),n=1,size=100)
getwd()
directory <- "/Users/mitchellmurphy/DataScience/datasets/specdata/"
setwd(directory)
setwd(""/Users/mitchellmurphy/DataScience/datasets/specdata/"")
setwd("/Users/mitchellmurphy/DataScience/datasets/specdata/")
setwd("/Users/mitchellmurphy/DataScience/datasets/specdata/")
setwd("/Users/mitchellmurphy/Desktop/DataScience/datasets/specdat/")
dir()
rnorm(2*2*10)
c(2,2,10)
rm(rate, envir = .GlobalEnv)
?mapply
mapply(rep, 1:4, 4:1)
?noise
?gl
gl(4,10)
?tapply(vector, index, function)
?tapply
x <- gl(3,20)
head(x)
typeof(x)
levels(x)
split(x,levelsx)
split(x,levels(x))
library(datasets)
levels(airquality)
colnames(airquality)
head(airquality)
levels(airquality$Month)
?split
monthly <- split(airquality, airquality$Month)
monthly
typeof(airquality$Month)
lapply(monthly, mean)
View(monthly)
avg.temps <- lapply(monthly, function(x) { colMeans(x[,"Temp"]) })
avg.temps <- lapply(monthly, function(x) colMeans(x[,"Temp"]) )
lapply(monthly, function(x) colMeans(x[,"Temp"]))
lapply(monthly, function(x) colMeans(x[,c("Ozone", Temp")]))
lapply(monthly, function(x) colMeans(x[,c("Ozone", Temp"))]))
rm(x)
lapply(monthly, function(x) { return(colMeans(x[,"Temp"])) })
s <- monthly
s
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[,c("Temp")]))
factor(airquality$Month)
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone", "Temp", "Wind")]))
head(monthly)
View(monthly)
lapply(s, function(x) colMeans(x[,c("Ozone", "Temp", "Wind")], na.rm = T))
rm(s)
sapply(monthly, function(x) colMeans(x[,"Temp"]))
sapply(monthly, function(x) colMeans(x[,"Ozone",Temp"]))
sapply(monthly, function(x) colMeans(x[,c("Ozone", "Temp")]))
sapply(monthly, function(x) colMeans(x[,c("Ozone", "Temp")]), na.rm = T)
sapply(monthly, function(x) colMeans(x[,c("Ozone", "Temp")], na.rm = T))
sapply(monthly, function(x) colMeans(x))
sapply(monthly, function(x) colMeans(x, na.rm = T))
?interaction
f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1,f2)
log(-1)
log(Inf)
log(0)
traceback()
x <- rnorm(100])
x <- rnorm(100)
y <- rnorm(100)
mf <- model.frame(y~x)
mf
mdl <- lm(y~x)
summary(mdl)
?predict
?eval
x2 <- rnorm(10)
predict(mdl, newdata = x2)
predict(mdl,x2)
data("iris")
data(iris)
head(iris)
View(iris)
?split
mean(iris[iris$Species == "virginica"])
mean(iris[iris$Species == "virginica",'Sepal.Length'])
split(iris, iris$Species)
sapply(split(iris, iris$Species), mean)
iris.species <- split(iris, iris$Species)
View(iris.species)
mean(iris.species$virginica)
mean(iris.species$virginica[,"Sepal.Width"])
mean(iris.species$virginica[,"Sepal.Length"])
apply(iris[, 1:4], 1, mean)
head(iris[,1:4])
?apply
library(datasets)
data("mtcars")
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
?tapply(vector, index, function)
?tapply
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
122.28571-82.63636
debug(ls)
ls()
?with
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
rm(rate)
library(datasets)
data(iris)
head(iris)
?sapply
sapply(split(iris$Sepal.Length, iris$Species), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
?grep
?solve
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(m = matrix()) {
inv <- NULL #placeholder for inverse
get <- function() m
set <- function(mat) {
m <<- mat
i <<- NULL
}
# also need getter and setter for inv
getInverse <- function() inv
setInverse <- function(i) {
inv <<- i
}
# return list of all 4 of these properties
list(get = get, set = set, getInverse = getInverse, setInverse = setInverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
x <- seq(0,1,100)
head(x)
?seq
x <- seq(from =0, to = 1, by = 0.01)
head(x)
?log
y <- log10(x)
head(y)
tail(y)
y <- log(x)
head(y)
tail(y)
head(log2(x))
head(log(x))
log1p(0)
log(1)
log1p(1)
log(2)
?lag
install.packages("tidyr")
install.packages("jsonlite")
install.packages(c("RMySQL", "xlsx", "foreign", "dplyr", "stringr", "lubridate", "ggplot2", "ggvis", "rgl", "XML"))
# set the working directory to that where the data for this project is located
setwd("~/Desktop/DataScience/coursera/data/hospital/")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
View(outcome)
outcome <- tolower(outcome) # since hospital names are in all caps, convert to lower (convention)
states <- unique(out_dt[["State"]])
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[, 11] <- as.numeric(outcome[, 11])
View(outcome)
outcome <- tolower(outcome) # since hospital names are in all caps, convert to lower (convention)
head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
typeof(outcome)
class(outcome)
?tolower
View(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
#outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
states <- unique(outcome$State)
states
?setNames
names(outcome)
state <- 'OH'
outcome <- outcome[outcome$State = state]
outcome <- outcome[outcome$State == state]
outcome <- outcome[outcome$State == state,]
View(outcome)
colnames(outcome)
?order
?order
ordered.outcomes <- outcome[order(outcome, 'hospital name')
ordered.outcomes <- outcome[order(outcome, 'hospital name')]
